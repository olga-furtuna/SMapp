{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\internship\\\\social-media-app\\\\SMapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(registerSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loginSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(profileSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(fetchPostsSaga);\n\nimport { put, call } from \"redux-saga/effects\";\nimport { registerUserService, loginUserService, userProfileService, fetchPostsService } from \"../services/apiService\";\nimport * as types from \"../actions\";\nexport function registerSaga(payload) {\n  var response;\n  return _regeneratorRuntime.wrap(function registerSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(registerUserService, payload);\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return [put({\n            type: types.REGISTER_USER_SUCCESS,\n            response: response\n          })];\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: types.REGISTER_USER_ERROR,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\nexport function loginSaga(payload) {\n  var response;\n  return _regeneratorRuntime.wrap(function loginSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loginUserService, payload);\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 6;\n          return [put({\n            type: types.LOGIN_USER_SUCCESS,\n            response: response\n          })];\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: types.LOGIN_USER_ERROR,\n            error: _context2.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\nexport function profileSaga(payload) {\n  var response;\n  return _regeneratorRuntime.wrap(function profileSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return call(userProfileService, payload);\n\n        case 2:\n          response = _context3.sent;\n          _context3.next = 5;\n          return [put({\n            type: types.USER_PROFILE_SUCCESS,\n            response: response\n          })];\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function fetchPostsSaga(payload) {\n  var response;\n  return _regeneratorRuntime.wrap(function fetchPostsSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return call(fetchPostsService, payload);\n\n        case 2:\n          response = _context4.sent;\n          _context4.next = 5;\n          return [put({\n            type: types.FETCH_POSTS_SUCCESS,\n            response: response\n          })];\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["D:/internship/social-media-app/SMapp/src/sagas/sagas.js"],"names":["registerSaga","loginSaga","profileSaga","fetchPostsSaga","put","call","registerUserService","loginUserService","userProfileService","fetchPostsService","types","payload","response","type","REGISTER_USER_SUCCESS","REGISTER_USER_ERROR","error","LOGIN_USER_SUCCESS","LOGIN_USER_ERROR","USER_PROFILE_SUCCESS","FETCH_POSTS_SUCCESS"],"mappings":";;oDAUiBA,Y;qDASAC,S;qDASAC,W;qDAKAC,c;;AAjCjB,SAASC,GAAT,EAAcC,IAAd,QAA0B,oBAA1B;AACA,SACEC,mBADF,EAEEC,gBAFF,EAGEC,kBAHF,EAIEC,iBAJF,QAKO,wBALP;AAOA,OAAO,KAAKC,KAAZ,MAAuB,YAAvB;AAEA,OAAO,SAAUV,YAAV,CAAuBW,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEc,iBAAMN,IAAI,CAACC,mBAAD,EAAsBK,OAAtB,CAAV;;AAFd;AAEGC,UAAAA,QAFH;AAAA;AAGH,iBAAM,CAACR,GAAG,CAAC;AAAES,YAAAA,IAAI,EAAEH,KAAK,CAACI,qBAAd;AAAqCF,YAAAA,QAAQ,EAARA;AAArC,WAAD,CAAJ,CAAN;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKH,iBAAMR,GAAG,CAAC;AAAES,YAAAA,IAAI,EAAEH,KAAK,CAACK,mBAAd;AAAmCC,YAAAA,KAAK;AAAxC,WAAD,CAAT;;AALG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASP,OAAO,SAAUf,SAAV,CAAoBU,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEc,iBAAMN,IAAI,CAACE,gBAAD,EAAmBI,OAAnB,CAAV;;AAFd;AAEGC,UAAAA,QAFH;AAAA;AAGH,iBAAM,CAACR,GAAG,CAAC;AAAES,YAAAA,IAAI,EAAEH,KAAK,CAACO,kBAAd;AAAkCL,YAAAA,QAAQ,EAARA;AAAlC,WAAD,CAAJ,CAAN;;AAHG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKH,iBAAMR,GAAG,CAAC;AAAES,YAAAA,IAAI,EAAEH,KAAK,CAACQ,gBAAd;AAAgCF,YAAAA,KAAK;AAArC,WAAD,CAAT;;AALG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASP,OAAO,SAAUd,WAAV,CAAsBS,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACY,iBAAMN,IAAI,CAACG,kBAAD,EAAqBG,OAArB,CAAV;;AADZ;AACCC,UAAAA,QADD;AAAA;AAEL,iBAAM,CAACR,GAAG,CAAC;AAAES,YAAAA,IAAI,EAAEH,KAAK,CAACS,oBAAd;AAAoCP,YAAAA,QAAQ,EAARA;AAApC,WAAD,CAAJ,CAAN;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP,OAAO,SAAUT,cAAV,CAAyBQ,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACY,iBAAMN,IAAI,CAACI,iBAAD,EAAoBE,OAApB,CAAV;;AADZ;AACCC,UAAAA,QADD;AAAA;AAEL,iBAAM,CAACR,GAAG,CAAC;AAAES,YAAAA,IAAI,EAAEH,KAAK,CAACU,mBAAd;AAAmCR,YAAAA,QAAQ,EAARA;AAAnC,WAAD,CAAJ,CAAN;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { put, call } from \"redux-saga/effects\";\nimport {\n  registerUserService,\n  loginUserService,\n  userProfileService,\n  fetchPostsService,\n} from \"../services/apiService\";\n\nimport * as types from \"../actions\";\n\nexport function* registerSaga(payload) {\n  try {\n    const response = yield call(registerUserService, payload);\n    yield [put({ type: types.REGISTER_USER_SUCCESS, response })];\n  } catch (error) {\n    yield put({ type: types.REGISTER_USER_ERROR, error });\n  }\n}\n\nexport function* loginSaga(payload) {\n  try {\n    const response = yield call(loginUserService, payload);\n    yield [put({ type: types.LOGIN_USER_SUCCESS, response })];\n  } catch (error) {\n    yield put({ type: types.LOGIN_USER_ERROR, error });\n  }\n}\n\nexport function* profileSaga(payload) {\n  const response = yield call(userProfileService, payload);\n  yield [put({ type: types.USER_PROFILE_SUCCESS, response })];\n}\n\nexport function* fetchPostsSaga(payload) {\n  const response = yield call(fetchPostsService, payload);\n  yield [put({ type: types.FETCH_POSTS_SUCCESS, response })];\n}\n"]},"metadata":{},"sourceType":"module"}